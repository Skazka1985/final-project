import { test as base } from '@playwright/test';
import { generateRandomUser } from '../test-data';
import { MainPage } from '../pages/main.page';
import { AuthPage } from '../pages/auth.page';
import { RegisterPage } from '../pages/register.page';
import { AdPage } from '../pages/advert.page';

// üîπ –í—ã–Ω–æ—Å–∏–º –í–°–ï –ª–æ–∫–∞—Ç–æ—Ä—ã —Å—é–¥–∞
const Locators = {
  auth: {
    title: 'text=–í—Ö–æ–¥',
    registerLink: 'text=–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ?',
    emailInput: { 
        role: 'textbox',
        name: '–ü–æ—á—Ç–∞'
      },
    passwordInput: { 
        role: 'textbox',
        name: '–ü–∞—Ä–æ–ª—å'
      },
    submitButton: { 
        role: 'button',
        name: '–í–æ–π—Ç–∏',
        nth: 1
      },
    emailError: { 
      selector: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ',
      nth: 0 // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      },

    passwordError: { 
      selector: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ',
      nth: 1 // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    },

    emailInvalid: 'text=–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã',
  },
  register: {
    title: 'text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    loginLink: 'text=–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç ?',
    emailInput: { 
        role: 'textbox',
        name: '–ü–æ—á—Ç–∞'
      },
    passwordInput: { 
        role: 'textbox',
        name: '–ü–∞—Ä–æ–ª—å'
      },
    firstNameInput: { 
        role: 'textbox',
        name: '–ò–º—è'
      },
    lastNameInput: { 
        role: 'textbox',
        name: '–§–∞–º–∏–ª–∏—è'
      },
    phoneInput: { 
        role: 'textbox',
        name: '–¢–µ–ª–µ—Ñ–æ–Ω'
      },
    submitButton: 'button:has-text("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—è")',

    // –õ–æ–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
    emailError: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ >> nth=0',
    passwordError: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ >> nth=1',
    firstNameError: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ >> nth=2',
    lastNameError: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ >> nth=3',
    phoneError: 'text=–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ >> nth=4',
    
    // –õ–æ–∫–∞—Ç–æ—Ä—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫
    emailInvalid: 'text=–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã',
    passwordInvalid: 'text=–ú–∏–Ω.–¥–ª–∏–Ω–Ω–∞ - 7 —Å–∏–º–≤–æ–ª–æ–≤',
    phoneInvalid: 'text=–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
  },
  main: {
    loginButton: 'button:has-text("–í–æ–π—Ç–∏") >> nth=0',
  },
};

type PageFixtures = {
  mainPage: MainPage;
  authPage: AuthPage;
  registerPage: RegisterPage;
  randomUser: ReturnType<typeof generateRandomUser>;
  adPage: AdPage;
  locators: typeof Locators; // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ç–æ—Ä—ã –≤ —Ñ–∏–∫—Å—Ç—É—Ä—ã
};

export const test = base.extend<PageFixtures>({
  locators: async ({}, use) => {
    await use(Locators); // üîπ –ü–µ—Ä–µ–¥–∞—ë–º –ª–æ–∫–∞—Ç–æ—Ä—ã –≤ —Ç–µ—Å—Ç—ã
  },
  mainPage: async ({ page, locators }, use) => {
    await use(new MainPage(page, locators.main)); // üîπ –ü–µ—Ä–µ–¥–∞—ë–º –ª–æ–∫–∞—Ç–æ—Ä—ã –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  },
  authPage: async ({ page, locators }, use) => {
    await use(new AuthPage(page, locators.auth));
  },
  registerPage: async ({ page, locators }, use) => {
    await use(new RegisterPage(page, locators.register));
  },
  randomUser: async ({}, use) => {
    await use(generateRandomUser());
  },
  adPage: async ({ page }, use) => {
    await use(new AdPage(page));
  },
});

export { expect } from '@playwright/test';